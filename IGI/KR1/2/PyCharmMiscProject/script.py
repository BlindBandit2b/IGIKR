from collections import Counter, defaultdict
import re
from statistics import median

def text_statistics(text, K=10, N=4):
    # –û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ—Ç –∑–Ω–∞–∫–æ–≤ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è –∏ –ø–µ—Ä–µ–≤–æ–¥ –≤ –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä
    clean_text = re.sub(r'[^\w\s]', '', text).lower()

    # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ —Å–ª–æ–≤–∞ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    words = clean_text.split()
    sentences = re.split(r'[.!?]', text)

    # –ü–æ–¥—Å—á—ë—Ç —á–∞—Å—Ç–æ—Ç—ã —Å–ª–æ–≤
    word_count = Counter(words)

    # –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –≤ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏
    sentence_lengths = [len(re.findall(r'\w+', sentence)) for sentence in sentences if sentence]
    avg_words = sum(sentence_lengths) / len(sentence_lengths) if sentence_lengths else 0

    # –ú–µ–¥–∏–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –≤ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏
    median_words = median(sentence_lengths) if sentence_lengths else 0

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±—É–∫–≤–µ–Ω–Ω—ã—Ö N-–≥—Ä–∞–º–º
    ngrams = defaultdict(int)
    for word in words:
        for i in range(len(word) - N + 1):
            ngram = word[i:i+N]
            ngrams[ngram] += 1

    # –¢–æ–ø-K —Å–∞–º—ã—Ö —á–∞—Å—Ç—ã—Ö N-–≥—Ä–∞–º–º
    top_ngrams = sorted(ngrams.items(), key=lambda x: x[1], reverse=True)[:K]

    # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print(f"=== –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–µ–∫—Å—Ç—É ===")
    print(f"\n–ß–∞—Å—Ç–æ—Ç–∞ —Å–ª–æ–≤:")
    for word, count in word_count.items():
        print(f"{word}: {count}")

    print(f"\n–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –≤ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏: {avg_words:.2f}")
    print(f"–ú–µ–¥–∏–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –≤ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏: {median_words}")

    print(f"\n–¢–æ–ø-{K} —Å–∞–º—ã—Ö —á–∞—Å—Ç—ã—Ö {N}-–≥—Ä–∞–º–º:")
    for ngram, count in top_ngrams:
        print(f"{ngram}: {count}")


# üìå –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö
text = input("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç: ")
K = int(input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–ø-N-–≥—Ä–∞–º–º (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10): ") or 10)
N = int(input("–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä N-–≥—Ä–∞–º–º (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 4): ") or 4)

# üìå –ó–∞–ø—É—Å–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
text_statistics(text, K, N)

input("\n –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")

